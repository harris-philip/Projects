package skillcalculator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author phili
 */
public class SkillCalculator2 extends javax.swing.JFrame {

    
    int skill;
    int intClick;
    /**
     * Creates new form SkillCalculator2
     */
    public SkillCalculator2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        basePulse = new javax.swing.JButton();
        baseSticky = new javax.swing.JButton();
        baseFirstAid = new javax.swing.JButton();
        baseTurret = new javax.swing.JButton();
        baseSmartCover = new javax.swing.JButton();
        baseSupport = new javax.swing.JButton();
        baseSeeker = new javax.swing.JButton();
        baseMobileCover = new javax.swing.JButton();
        baseBallistic = new javax.swing.JButton();
        recoveryBtn = new javax.swing.JButton();
        tacticalBtn = new javax.swing.JButton();
        survivorBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        mod1Btn = new javax.swing.JButton();
        mod2Btn = new javax.swing.JButton();
        mod3Btn = new javax.swing.JButton();
        baseSkill = new javax.swing.JLabel();
        actualSkill = new javax.swing.JLabel();
        intSkill = new javax.swing.JTextField();
        skillPwrLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Skill Calculator 2.0");
        setPreferredSize(new java.awt.Dimension(850, 650));
        setResizable(false);

        basePulse.setText("Pulse");
        basePulse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basePulseActionPerformed(evt);
            }
        });

        baseSticky.setText("Sticky Bomb");
        baseSticky.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseStickyActionPerformed(evt);
            }
        });

        baseFirstAid.setText("First Aid");
        baseFirstAid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseFirstAidActionPerformed(evt);
            }
        });

        baseTurret.setText("Turret");
        baseTurret.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseTurretActionPerformed(evt);
            }
        });

        baseSmartCover.setText("Smart Cover");
        baseSmartCover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseSmartCoverActionPerformed(evt);
            }
        });

        baseSupport.setText("Support Station");
        baseSupport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseSupportActionPerformed(evt);
            }
        });

        baseSeeker.setText("Seeker Mine");
        baseSeeker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseSeekerActionPerformed(evt);
            }
        });

        baseMobileCover.setText("Mobile Cover");
        baseMobileCover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseMobileCoverActionPerformed(evt);
            }
        });

        baseBallistic.setText("Ballistic Shield");
        baseBallistic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseBallisticActionPerformed(evt);
            }
        });

        recoveryBtn.setText("Recovery Link");
        recoveryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recoveryBtnActionPerformed(evt);
            }
        });

        tacticalBtn.setText("Tactical Link");
        tacticalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tacticalBtnActionPerformed(evt);
            }
        });

        survivorBtn.setText("Survivor Link");
        survivorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                survivorBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(baseSupport, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(baseSeeker, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(baseFirstAid, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(baseTurret, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(baseSmartCover, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(baseMobileCover, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(basePulse, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(baseSticky, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(baseBallistic, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(recoveryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tacticalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(survivorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(basePulse, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(baseSticky, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(baseBallistic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(baseFirstAid, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseTurret, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseSmartCover, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(baseSupport, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseSeeker, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseMobileCover, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recoveryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tacticalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(survivorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        mod1Btn.setText("Mod 1");
        mod1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod1BtnActionPerformed(evt);
            }
        });

        mod2Btn.setText("Mod 2");
        mod2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod2BtnActionPerformed(evt);
            }
        });

        mod3Btn.setText("Mod 3");
        mod3Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod3BtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mod1Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mod2Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(mod3Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(mod1Btn, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(mod2Btn, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(mod3Btn, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        baseSkill.setText("Click on a Skill (and/or its mod)");

        actualSkill.setText("Click on a Skill (and/or its mod)");

        intSkill.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        intSkill.setText("15000");
        intSkill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intSkillActionPerformed(evt);
            }
        });

        skillPwrLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        skillPwrLabel.setText("Skill Power:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(baseSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(actualSkill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(skillPwrLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(intSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(intSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skillPwrLabel))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(baseSkill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1))
                    .addComponent(actualSkill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void basePulseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basePulseActionPerformed
        mod1Btn.setText("Recon Pack");
        mod2Btn.setText("Scrambler");
        mod3Btn.setText("Tactical Scanner");
        
        mod1Btn.setEnabled(true);
        mod2Btn.setEnabled(true);
        mod3Btn.setEnabled(true);
        
        skill = Integer.parseInt(intSkill.getText());
        intClick = 1;
        
        
        double range = 60.0;
        double duration = 20.0;
        double baseCriticalChance = 7.70;
        double baseCriticalDmg = 7.70;
        double baseCool = 56.40;
        
        double newCriticalChance = 7.70;
        double newCriticalDmg = 7.70;
        double newCool = 56.4;
            
        baseSkill.setText("<html>" + "Range: " + range + " m" + "<br>" 
            + "Duration: " + duration + " s" + "<br>" 
            + "Critical Hit Chance: " + baseCriticalChance + "%" + "<br>" 
            + "Critical Hit Damage: " + baseCriticalDmg + "%" + "<br>" 
            + "Cooldown: " + baseCool + " s" + "</html>");
        
        actualSkill.setText("<html>" + "Range: " + range + " m" + "<br>" 
                + "Duration: " + duration + " s" + "<br>" 
                + "Critical Hit Chance: " + newCriticalChance + "%" + "<br>" 
                + "Critical Hit Damage: " + newCriticalDmg + "%" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
        
        
    }//GEN-LAST:event_basePulseActionPerformed

    private void baseStickyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseStickyActionPerformed
        mod1Btn.setText("BFB");
        mod2Btn.setText("FlashBang");
        mod3Btn.setText("Proximity Fuse");
        
        mod1Btn.setEnabled(true);
        mod2Btn.setEnabled(true);
        mod3Btn.setEnabled(true);
        
        skill = Integer.parseInt(intSkill.getText());
        intClick = 2;
        
        int baseexplosionDmg = 27714;
        double explosionRad = 4.0;
        double deployRange = 50.0;
        double baseCool = 76.20;
        
        int newexplosionDmg = 27714 + skill;
        double newCool = 76.2;
        
        baseSkill.setText("<html>" + "Explosion Damage: " + baseexplosionDmg + " HP" + "<br>" 
                + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                + "Deployment range: " + deployRange + " m" + "<br>" 
                + "Cooldown: " + baseCool + " s" + "</html>");
        
        actualSkill.setText("<html>" + "Explosion Damage: " + newexplosionDmg + " HP" + "<br>" 
                + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                + "Deployment range: " + deployRange + " m" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
    }//GEN-LAST:event_baseStickyActionPerformed

    private void baseBallisticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseBallisticActionPerformed
        mod1Btn.setText("Reactive Targeting");
        mod2Btn.setText("Assault Shield");
        mod3Btn.setText("Kinetic Breaker");
        
        mod1Btn.setEnabled(true);
        mod2Btn.setEnabled(true);
        mod3Btn.setEnabled(true);
        
        skill = Integer.parseInt(intSkill.getText());
        intClick = 3;
        
        int baseHealth = 100779;
        double dmgIncrease = 10.0;
        double dmgResistance = 10.0;
        double threat = 200.0;
        double baseCool = 37.60;
        
        int newHealth = 100779;
        double newCool = 37.60;
        
        baseSkill.setText("<html>" + "Health: " + baseHealth + " HP " + "<br>" 
                + "Damage Increase: " + dmgIncrease + "%" + "<br>" 
                + "Damage Resistance: " + dmgResistance + "%" + "<br>" 
                + "Threat Increase: " + threat + "%" + "<br>" 
                + "Cooldown: " + baseCool + " s" + "</html>");

        actualSkill.setText("<html>" + "Health: " + newHealth + " HP " + "<br>" 
                + "Damage Increase: " + dmgIncrease + "%" + "<br>" 
                + "Damage Resistance: " + dmgResistance + "%" + "<br>" 
                + "Threat Increase: " + threat + "%" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
    }//GEN-LAST:event_baseBallisticActionPerformed

    private void baseFirstAidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseFirstAidActionPerformed
        mod1Btn.setText("Defibrillator");
        mod2Btn.setText("Overdose");
        mod3Btn.setText("Booster Shot");
        
        mod1Btn.setEnabled(true);
        mod2Btn.setEnabled(true);
        mod3Btn.setEnabled(true);
        
        skill = Integer.parseInt(intSkill.getText());
        intClick = 4;
        
        int baseSelfHeal = 13437;
        int baseAllyHeal = 13437;
        double range = 3.0;
        double deployRange = 40.0;
        double baseCool = 56.90;
        
        int newSelfHeal = 12093;
        int newAllyHeal = 12093;
        double newCool = 56.9;
        
        baseSkill.setText("<html>" + "Self Heal: " + baseSelfHeal + " HP" + "<br>" 
                + "Ally Heal: "+ baseAllyHeal + " HP" + "<br>" 
                + "Range: " + range +  " m" + "<br>" 
                + "Deploy range: " + deployRange + " m" + "<br>" 
                + "Cooldown: " + baseCool + " s" + "</html>");
        
        actualSkill.setText("<html>" + "Self Heal: " + newSelfHeal + " HP" + "<br>" 
                + "Ally Heal: "+ newAllyHeal + " HP" + "<br>" 
                + "Range: " + range +  " m" + "<br>" 
                + "Deploy range: " + deployRange + " m" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
    }//GEN-LAST:event_baseFirstAidActionPerformed

    private void baseTurretActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseTurretActionPerformed
        mod1Btn.setText("Active Sensor");
        mod2Btn.setText("DragonBreath");
        mod3Btn.setText("Zapper");
        
        mod1Btn.setEnabled(true);
        mod2Btn.setEnabled(true);
        mod3Btn.setEnabled(true);
        
        skill = Integer.parseInt(intSkill.getText());
        intClick = 5;
        
        int baseDmg = 308;
        double range = 35.0;
        double lifetime = 45.0;
        int baseHealth = 40312;
        double baseCool = 56.40;
        
        int newDmg = 308;
        int newHealth = 40312;
        double newCool = 56.40;
        
        baseSkill.setText("<html>" + "Damage: " + baseDmg + " HP" + "<br>" 
                + "Range: " + range + " m" + "<br>" 
                + "Lifetime: " + lifetime + " s" + "<br>" 
                + "Health: " + baseHealth + " HP" + "<br>" 
                + "Cooldown: " + baseCool + " s" + "</html>");
        
        actualSkill.setText("<html>" + "Damage: " + baseDmg + " HP" + "<br>" 
                + "Range: " + range + " m" + "<br>" 
                + "Lifetime: " + lifetime + " s" + "<br>" 
                + "Health: " + newHealth + " HP" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
    }//GEN-LAST:event_baseTurretActionPerformed

    private void baseSmartCoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseSmartCoverActionPerformed
        mod1Btn.setText("Trapper");
        mod2Btn.setText("Recharger");
        mod3Btn.setText("Concealment");
        
        mod1Btn.setEnabled(true);
        mod2Btn.setEnabled(true);
        mod3Btn.setEnabled(true);
        
        skill = Integer.parseInt(intSkill.getText());
        intClick = 6;
        
        double basedmgResistance = 9.34;
        double baseWpnStability = 9.34;
        double baseWpnAccuracy = 9.34;
        double effectRange = 8.0;
        double lifetime = 30.0;
        double baseCool = 41.70;
        
        double newdmgResistance = 9.34;
        double newWpnStability = 9.34;
        double newWpnAccuracy = 9.34;
        double newCool = 41.70;
        
        baseSkill.setText("<html>" + "Damage Resistance: " + basedmgResistance + "%" + "<br>" 
                + "Weapon Stability: " + baseWpnStability + "%" + "<br>" 
                + "Weapon Accuracy: " + baseWpnAccuracy + "%" + "<br>" 
                + "Effect range: " + effectRange + " m" + "<br>" 
                + "Cooldown: " + baseCool + " s" + "</html>");
        
        actualSkill.setText("<html>" + "Damage Resistance: " + newdmgResistance + "%" + "<br>" 
                + "Weapon Stability: " + newWpnStability + "%" + "<br>" 
                + "Weapon Accuracy: " + newWpnAccuracy + "%" + "<br>" 
                + "Effect range: " + effectRange + " m" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
    }//GEN-LAST:event_baseSmartCoverActionPerformed

    private void baseSupportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseSupportActionPerformed
        mod1Btn.setText("Life Support");
        mod2Btn.setText("Immunizer");
        mod3Btn.setText("Ammo Cache");
        
        mod1Btn.setEnabled(true);
        mod2Btn.setEnabled(true);
        mod3Btn.setEnabled(true);
        
        skill = Integer.parseInt(intSkill.getText());
        intClick = 7;
        
        double range = 8.0;
        int baseHealRate = 672;
        double reviveTime = 5.0;
        double baseLifetime = 25.30;
        int baseHealth = 10750;
        double baseCool = 47.00;
        
        int newHealRate = 672;
        double newLifetime = 25.30;
        int newHealth = 10750;
        double newCool = 47.00;
        
        baseSkill.setText("<html>" + "range: " + range + " m" + "<br>" 
                + "Healing Rate: " + baseHealRate + " HP/s" + "<br>" 
                + "Revive Time: " + reviveTime + " s" + "<br>" 
                + "Lifetime: " + baseLifetime + " s" + "<br>" 
                + "Health: " + baseHealth + " HP" + "<br>" 
                + "Cooldown: " + baseCool + " s" + "</html>");
        
        actualSkill.setText("<html>" + "range: " + range + " m" + "<br>" 
                + "Healing Rate: " + newHealRate + " HP/s" + "<br>" 
                + "Revive Time: " + reviveTime + " s" + "<br>" 
                + "Lifetime: " + newLifetime + " s" + "<br>" 
                + "Health: " + newHealth + " HP" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
        
    }//GEN-LAST:event_baseSupportActionPerformed

    private void baseSeekerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseSeekerActionPerformed
        mod1Btn.setText("Airburst");
        mod2Btn.setText("Gas Charge");
        mod3Btn.setText("Cluster");
        
        mod1Btn.setEnabled(true);
        mod2Btn.setEnabled(true);
        mod3Btn.setEnabled(true);
        
        skill = Integer.parseInt(intSkill.getText());
        intClick = 8;
        
        int baseexplosionDmg = 16125;
        double explosionRad = 6.0;
        double detectionRange = 30.0;
        double lifetime = 45.0;
        int baseHealth = 4031;
        double baseCool = 47.00;
        
        int newexplosionDmg = 16125;
        int newHealth = 4031;
        double newCool = 47.00;
        
        baseSkill.setText("<html>" + "Explosion Damage: " + baseexplosionDmg + " HP" + "<br>" 
                + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                + "Detection Range: + " + detectionRange + " m" + "<br>" 
                + "Lifetime: " + lifetime + " s" + "<br>" 
                + "Health: " + baseHealth + " HP" + "<br>" 
                + "Cooldown: " + baseCool + " s" + "</html>");
        
        actualSkill.setText("<html>" + "Explosion Damage: " + newexplosionDmg + " HP" + "<br>" 
                + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                + "Detection Range: + " + detectionRange + " m" + "<br>" 
                + "Lifetime: " + lifetime + " s" + "<br>" 
                + "Health: " + newHealth + " HP" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
    }//GEN-LAST:event_baseSeekerActionPerformed

    private void baseMobileCoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseMobileCoverActionPerformed
        mod1Btn.setText("Extention");
        mod2Btn.setText("Blast Shield");
        mod3Btn.setText("Countermeasures");
        
        mod1Btn.setEnabled(true);
        mod2Btn.setEnabled(true);
        mod3Btn.setEnabled(true);
        
        skill = Integer.parseInt(intSkill.getText());
        intClick = 9;
        
        int baseHealth = 107498;
        double wpnResistance = 20.0;
        double blastResistance = 25.0;
        double baseCool = 37.60;
        int baseBlastShieldDmg = 0;
        
        int newHealth = 107498;
        double newCool = 37.60;
        int newBlastShieldDmg = 0;
        
        baseSkill.setText("<html>" + "Health: " + baseHealth + " HP" + "<br>" 
                + "Weapon Resistance: " + wpnResistance + "%" + "<br>" 
                + "Blast Resistance: " + blastResistance + "%" + "<br>" 
                + "Cooldown: " + baseCool + " s" +  "<br>" 
                + "Blast Shield Damage: " + baseBlastShieldDmg + " HP" + "</html>");
        
        actualSkill.setText("<html>" + "Health: " + newHealth + " HP" + "<br>" 
                + "Weapon Resistance: " + wpnResistance + "%" + "<br>" 
                + "Blast Resistance: " + blastResistance + "%" + "<br>" 
                + "Cooldown: " + newCool + " s" +  "<br>" 
                + "Blast Shield Damage: " + newBlastShieldDmg + " HP" + "</html>");
    }//GEN-LAST:event_baseMobileCoverActionPerformed

    private void mod1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod1BtnActionPerformed
        skill = Integer.parseInt(intSkill.getText());
        
        switch (intClick) {
            case 1:
                double range = 80.0;
                double duration = 20.0;
                double baseCriticalChance = 7.70;
                double baseCriticalDmg = 7.70;
                double baseCool = 42.30;
                double newCriticalChance = 7.70;
                double newCriticalDmg = 7.70;
                double newCool = 42.30;
                baseSkill.setText("<html>" + "Range: " + range + " m" + "<br>"
                        + "Duration: " + duration + " s" + "<br>"
                        + "Critical Hit Chance: " + baseCriticalChance + "%" + "<br>"
                        + "Critical Hit Damage: " + baseCriticalDmg + "%" + "<br>"
                        + "Cooldown: " + baseCool + " s" + "</html>");
                actualSkill.setText("<html>" + "Range: " + range + " m" + "<br>"
                        + "Duration: " + duration + " s" + "<br>"
                        + "Critical Hit Chance: " + newCriticalChance + "%" + "<br>"
                        + "Critical Hit Damage: " + newCriticalDmg + "%" + "<br>"
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 2:
                int baseexplosionDmg = 37792;
                double explosionRad = 4.50;
                double deployRange = 50.0;
                baseCool = 56.40;
        
                int newexplosionDmg = 37792;
                newCool = 56.40;
        
                baseSkill.setText("<html>" + "Explosion Damage: " + baseexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Deployment range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Explosion Damage: " + newexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Deployment range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 3:
                int baseHealth = 151169;
                double dmgIncrease = 5.0;
                double dmgResistance = 10.0;
                double threat = 200.0;
                baseCool = 37.60;

                int newHealth = 100779;
                newCool = 37.60;

                baseSkill.setText("<html>" + "Health: " + baseHealth + " HP " + "<br>" 
                        + "Damage Increase: " + dmgIncrease + "%" + "<br>" 
                        + "Damage Resistance: " + dmgResistance + "%" + "<br>" 
                        + "Threat Increase: " + threat + "%" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Health: " + newHealth + " HP " + "<br>" 
                        + "Damage Increase: " + dmgIncrease + "%" + "<br>" 
                        + "Damage Resistance: " + dmgResistance + "%" + "<br>" 
                        + "Threat Increase: " + threat + "%" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 4:
                int baseSelfHeal = 10078;
                int baseAllyHeal = 22171;
                range = 3.0;
                deployRange = 40.0;
                baseCool = 42.70;

                int newSelfHeal = 12093;
                int newAllyHeal = 12093;
                newCool = 56.9;

                baseSkill.setText("<html>" + "Self Heal: " + baseSelfHeal + " HP" + "<br>" 
                        + "Ally Heal: "+ baseAllyHeal + " HP" + "<br>" 
                        + "Range: " + range +  " m" + "<br>" 
                        + "Deploy range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Self Heal: " + newSelfHeal + " HP" + "<br>" 
                        + "Ally Heal: "+ newAllyHeal + " HP" + "<br>" 
                        + "Range: " + range +  " m" + "<br>" 
                        + "Deploy range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 5:
                int baseDmg = 377;
                range = 35.0;
                double lifetime = 45.0;
                baseHealth = 40312;
                baseCool = 56.40;

                int newDmg = 308;
                newHealth = 40312;
                newCool = 56.40;

                baseSkill.setText("<html>" + "Damage: " + baseDmg + " HP" + "<br>" 
                        + "Range: " + range + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Damage: " + baseDmg + " HP" + "<br>" 
                        + "Range: " + range + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + newHealth + " HP" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 6:
                double basedmgResistance = 6.67;
                double baseWpnStability = 6.67;
                double baseWpnAccuracy = 6.67;
                double effectRange = 8.0;
                lifetime = 30.0;
                baseCool = 41.70;

                double newdmgResistance = 9.34;
                double newWpnStability = 9.34;
                double newWpnAccuracy = 9.34;
                newCool = 41.70;

                baseSkill.setText("<html>" + "Damage Resistance: " + basedmgResistance + "%" + "<br>" 
                        + "Weapon Stability: " + baseWpnStability + "%" + "<br>" 
                        + "Weapon Accuracy: " + baseWpnAccuracy + "%" + "<br>" 
                        + "Effect range: " + effectRange + " m" + "<br>"
                        + "LifeTime: " + lifetime + " s" + "<br>"
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Damage Resistance: " + newdmgResistance + "%" + "<br>" 
                        + "Weapon Stability: " + newWpnStability + "%" + "<br>" 
                        + "Weapon Accuracy: " + newWpnAccuracy + "%" + "<br>" 
                        + "Effect range: " + effectRange + " m" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 7:
                range = 8.0;
                int baseHealRate = 806;
                double reviveTime = 3.0;
                double baseLifetime = 25.30;
                baseHealth = 10750;
                baseCool = 47.00;

                int newHealRate = 672;
                double newLifetime = 25.30;
                newHealth = 10750;
                newCool = 47.00;

                baseSkill.setText("<html>" + "range: " + range + " m" + "<br>" 
                        + "Healing Rate: " + baseHealRate + " HP/s" + "<br>" 
                        + "Revive Time: " + reviveTime + " s" + "<br>" 
                        + "Lifetime: " + baseLifetime + " s" + "<br>" 
                        + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "range: " + range + " m" + "<br>" 
                        + "Healing Rate: " + newHealRate + " HP/s" + "<br>" 
                        + "Revive Time: " + reviveTime + " s" + "<br>" 
                        + "Lifetime: " + newLifetime + " s" + "<br>" 
                        + "Health: " + newHealth + " HP" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 8:
                baseexplosionDmg = 5375;
                explosionRad = 5.0;
                double detectionRange = 30.0;
                lifetime = 45.0;
                baseHealth = 4031;
                baseCool = 47.00;

                newexplosionDmg = 16125;
                newHealth = 4031;
                newCool = 47.00;

                baseSkill.setText("<html>" + "Explosion Damage: " + baseexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Detection Range: + " + detectionRange + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Explosion Damage: " + newexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Detection Range: + " + detectionRange + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + newHealth + " HP" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 9:
                baseHealth = 214995;
                double wpnResistance = 20.0;
                double blastResistance = 25.0;
                baseCool = 56.40;
                int baseBlastShieldDmg = 0;

                newHealth = 107498;
                newCool = 37.60;
                int newBlastShieldDmg = 0;

                baseSkill.setText("<html>" + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Weapon Resistance: " + wpnResistance + "%" + "<br>" 
                        + "Blast Resistance: " + blastResistance + "%" + "<br>" 
                        + "Cooldown: " + baseCool + " s" +  "<br>" 
                        + "Blast Shield Damage: " + baseBlastShieldDmg + " HP" + "</html>");

                actualSkill.setText("<html>" + "Health: " + newHealth + " HP" + "<br>" 
                        + "Weapon Resistance: " + wpnResistance + "%" + "<br>" 
                        + "Blast Resistance: " + blastResistance + "%" + "<br>" 
                        + "Cooldown: " + newCool + " s" +  "<br>" 
                        + "Blast Shield Damage: " + newBlastShieldDmg + " HP" + "</html>");
                break;
            default:
                break;
        }
    }//GEN-LAST:event_mod1BtnActionPerformed

    private void mod2BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod2BtnActionPerformed
        skill = Integer.parseInt(intSkill.getText());
        
        switch (intClick) {
            case 1:
                double range = 60.0;
                double duration = 20.0;
                double baseCriticalChance = 7.70;
                double baseCriticalDmg = 7.70;
                double baseCool = 56.40;
                double newCriticalChance = 7.70;
                double newCriticalDmg = 7.70;
                double newCool = 56.4;
                baseSkill.setText("<html>" + "Range: " + range + " m" + "<br>"
                        + "Duration: " + duration + " s" + "<br>"
                        + "Critical Hit Chance: " + baseCriticalChance + "%" + "<br>"
                        + "Critical Hit Damage: " + baseCriticalDmg + "%" + "<br>"
                        + "Cooldown: " + baseCool + " s" + "</html>");
                actualSkill.setText("<html>" + "Range: " + range + " m" + "<br>"
                        + "Duration: " + duration + " s" + "<br>"
                        + "Critical Hit Chance: " + newCriticalChance + "%" + "<br>"
                        + "Critical Hit Damage: " + newCriticalDmg + "%" + "<br>"
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 2:
                int baseexplosionDmg = 2771;
                double explosionRad = 6.0;
                double deployRange = 50.0;
                baseCool = 47.0;

                int newexplosionDmg = 37792;
                newCool = 56.40;

                baseSkill.setText("<html>" + "Explosion Damage: " + baseexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Deployment range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Explosion Damage: " + newexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Deployment range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 3:
                int baseHealth = 75571;
                double dmgIncrease = 20.0;
                double dmgResistance = 10.0;
                double threat = 200.0;
                baseCool = 37.60;

                int newHealth = 100779;
                newCool = 37.60;

                baseSkill.setText("<html>" + "Health: " + baseHealth + " HP " + "<br>" 
                        + "Damage Increase: " + dmgIncrease + "%" + "<br>" 
                        + "Damage Resistance: " + dmgResistance + "%" + "<br>" 
                        + "Threat Increase: " + threat + "%" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Health: " + newHealth + " HP " + "<br>" 
                        + "Damage Increase: " + dmgIncrease + "%" + "<br>" 
                        + "Damage Resistance: " + dmgResistance + "%" + "<br>" 
                        + "Threat Increase: " + threat + "%" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 4:
                int baseSelfHeal = 18140;
                int baseAllyHeal = 10078;
                range = 2.0;
                deployRange = 40.0;
                baseCool = 62.60;

                int newSelfHeal = 12093;
                int newAllyHeal = 12093;
                newCool = 56.9;

                baseSkill.setText("<html>" + "Self Heal: " + baseSelfHeal + " HP" + "<br>" 
                        + "Ally Heal: "+ baseAllyHeal + " HP" + "<br>" 
                        + "Range: " + range +  " m" + "<br>" 
                        + "Deploy range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Self Heal: " + newSelfHeal + " HP" + "<br>" 
                        + "Ally Heal: "+ newAllyHeal + " HP" + "<br>" 
                        + "Range: " + range +  " m" + "<br>" 
                        + "Deploy range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 5:
                int baseDmg = 616;
                range = 12.0;
                double lifetime = 45.0;
                baseHealth = 40312;
                baseCool = 70.50;

                int newDmg = 308;
                newHealth = 40312;
                newCool = 56.40;

                baseSkill.setText("<html>" + "Damage: " + baseDmg + " HP" + "<br>" 
                        + "Range: " + range + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Damage: " + baseDmg + " HP" + "<br>" 
                        + "Range: " + range + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + newHealth + " HP" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 6:
                double basedmgResistance = 9.34;
                double baseWpnStability = 9.34;
                double baseWpnAccuracy = 9.34;
                double effectRange = 8.0;
                lifetime = 20.0;
                baseCool = 41.70;

                double newdmgResistance = 9.34;
                double newWpnStability = 9.34;
                double newWpnAccuracy = 9.34;
                newCool = 41.70;

                baseSkill.setText("<html>" + "Damage Resistance: " + basedmgResistance + "%" + "<br>" 
                        + "Weapon Stability: " + baseWpnStability + "%" + "<br>" 
                        + "Weapon Accuracy: " + baseWpnAccuracy + "%" + "<br>" 
                        + "Effect range: " + effectRange + " m" + "<br>"
                        + "LifeTime: " + lifetime + " s" + "<br>"
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Damage Resistance: " + newdmgResistance + "%" + "<br>" 
                        + "Weapon Stability: " + newWpnStability + "%" + "<br>" 
                        + "Weapon Accuracy: " + newWpnAccuracy + "%" + "<br>" 
                        + "Effect range: " + effectRange + " m" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 7:
                range = 8.0;
                int baseHealRate = 672;
                double reviveTime = 5.0;
                double baseLifetime = 18.40;
                baseHealth = 10750;
                baseCool = 47.00;

                int newHealRate = 672;
                double newLifetime = 18.40;
                newHealth = 10750;
                newCool = 47.00;

                baseSkill.setText("<html>" + "range: " + range + " m" + "<br>" 
                        + "Healing Rate: " + baseHealRate + " HP/s" + "<br>" 
                        + "Revive Time: " + reviveTime + " s" + "<br>" 
                        + "Lifetime: " + baseLifetime + " s" + "<br>" 
                        + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "range: " + range + " m" + "<br>" 
                        + "Healing Rate: " + newHealRate + " HP/s" + "<br>" 
                        + "Revive Time: " + reviveTime + " s" + "<br>" 
                        + "Lifetime: " + newLifetime + " s" + "<br>" 
                        + "Health: " + newHealth + " HP" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 8:
                baseexplosionDmg = 0;
                explosionRad = 5.0;
                double detectionRange = 30.0;
                lifetime = 45.0;
                baseHealth = 4031;
                baseCool = 47.00;

                newexplosionDmg = 0;
                newHealth = 4031;
                newCool = 47.00;

                baseSkill.setText("<html>" + "Explosion Damage: " + baseexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Detection Range: + " + detectionRange + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Explosion Damage: " + newexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Detection Range: + " + detectionRange + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + newHealth + " HP" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 9:
                baseHealth = 107498;
                double wpnResistance = 18.0;
                double blastResistance = 35.0;
                baseCool = 37.60;
                int baseBlastShieldDmg = 13437;

                newHealth = 107498;
                newCool = 37.60;
                int newBlastShieldDmg = 13437;

                baseSkill.setText("<html>" + baseHealth + "<br>" 
                        + "Weapon Resistance: 18.0%" + "<br>" 
                        + "Blast Resistance: 35.0%" + "<br>" 
                        + baseCool + "</html>");

                actualSkill.setText("<html>" + "Health: " + newHealth + " HP" + "<br>" 
                        + "Weapon Resistance: " + wpnResistance + "%" + "<br>" 
                        + "Blast Resistance: " + blastResistance + "%" + "<br>" 
                        + "Cooldown: " + newCool + " s" +  "<br>" 
                        + "Blast Shield Damage: " + newBlastShieldDmg + " HP" + "</html>");
                break;
            default:
                break;
        }
    }//GEN-LAST:event_mod2BtnActionPerformed

    private void mod3BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod3BtnActionPerformed
        skill = Integer.parseInt(intSkill.getText());
        
        switch (intClick) {
            case 1:
                double range = 60.0;
                double duration = 20.0;
                double baseCriticalChance = 7.70;
                double baseCriticalDmg = 10.20;
                double baseCool = 56.40;
                double newCriticalChance = 7.70;
                double newCriticalDmg = 7.70;
                double newCool = 56.4;
                baseSkill.setText("<html>" + "Range: " + range + " m" + "<br>"
                        + "Duration: " + duration + " s" + "<br>"
                        + "Critical Hit Chance: " + baseCriticalChance + "%" + "<br>"
                        + "Critical Hit Damage: " + baseCriticalDmg + "%" + "<br>"
                        + "Cooldown: " + baseCool + " s" + "</html>");
                actualSkill.setText("<html>" + "Range: " + range + " m" + "<br>"
                        + "Duration: " + duration + " s" + "<br>"
                        + "Critical Hit Chance: " + newCriticalChance + "%" + "<br>"
                        + "Critical Hit Damage: " + newCriticalDmg + "%" + "<br>"
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 2:
                int baseexplosionDmg = 27714;
                double explosionRad = 6.25;
                double deployRange = 50.0;
                baseCool = 76.20;

                int newexplosionDmg = 37792;
                newCool = 56.40;

                baseSkill.setText("<html>" + "Explosion Damage: " + baseexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Deployment range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Explosion Damage: " + newexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Deployment range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 3:
                int baseHealth = 100779;
                double dmgIncrease = 10.0;
                double dmgResistance = 10.0;
                double threat = 200.0;
                baseCool = 37.60;

                int newHealth = 100779;
                newCool = 37.60;

                baseSkill.setText("<html>" + "Health: " + baseHealth + " HP " + "<br>" 
                        + "Damage Increase: " + dmgIncrease + "%" + "<br>" 
                        + "Damage Resistance: " + dmgResistance + "%" + "<br>" 
                        + "Threat Increase: " + threat + "%" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Health: " + newHealth + " HP " + "<br>" 
                        + "Damage Increase: " + dmgIncrease + "%" + "<br>" 
                        + "Damage Resistance: " + dmgResistance + "%" + "<br>" 
                        + "Threat Increase: " + threat + "%" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 4:
                int baseSelfHeal = 12093;
                int baseAllyHeal = 12093;
                range = 3.0;
                deployRange = 40.0;
                baseCool = 56.90;

                int newSelfHeal = 12093;
                int newAllyHeal = 12093;
                newCool = 56.9;

                baseSkill.setText("<html>" + "Self Heal: " + baseSelfHeal + " HP" + "<br>" 
                        + "Ally Heal: "+ baseAllyHeal + " HP" + "<br>" 
                        + "Range: " + range +  " m" + "<br>" 
                        + "Deploy range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Self Heal: " + newSelfHeal + " HP" + "<br>" 
                        + "Ally Heal: "+ newAllyHeal + " HP" + "<br>" 
                        + "Range: " + range +  " m" + "<br>" 
                        + "Deploy range: " + deployRange + " m" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 5:
                int baseDmg = 34;
                range = 16.0;
                double lifetime = 25.0;
                baseHealth = 13437;
                baseCool = 56.40;

                int newDmg = 308;
                newHealth = 40312;
                newCool = 56.40;

                baseSkill.setText("<html>" + "Damage: " + baseDmg + " HP" + "<br>" 
                        + "Range: " + range + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Damage: " + baseDmg + " HP" + "<br>" 
                        + "Range: " + range + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + newHealth + " HP" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 6:
                double basedmgResistance = 9.34;
                double baseWpnStability = 9.34;
                double baseWpnAccuracy = 9.34;
                double effectRange = 6.0;
                lifetime = 30.0;
                baseCool = 41.70;

                double newdmgResistance = 9.34;
                double newWpnStability = 9.34;
                double newWpnAccuracy = 9.34;
                newCool = 41.70;

                baseSkill.setText("<html>" + "Damage Resistance: " + basedmgResistance + "%" + "<br>" 
                        + "Weapon Stability: " + baseWpnStability + "%" + "<br>" 
                        + "Weapon Accuracy: " + baseWpnAccuracy + "%" + "<br>" 
                        + "Effect range: " + effectRange + " m" + "<br>"
                        + "LifeTime: " + lifetime + " s" + "<br>"
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Damage Resistance: " + newdmgResistance + "%" + "<br>" 
                        + "Weapon Stability: " + newWpnStability + "%" + "<br>" 
                        + "Weapon Accuracy: " + newWpnAccuracy + "%" + "<br>" 
                        + "Effect range: " + effectRange + " m" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 7:
                range = 8.0;
                int baseHealRate = 672;
                double reviveTime = 5.0;
                double baseLifetime = 25.30;
                baseHealth = 10750;
                baseCool = 47.00;

                int newHealRate = 672;
                double newLifetime = 25.30;
                newHealth = 10750;
                newCool = 47.00;

                baseSkill.setText("<html>" + "range: " + range + " m" + "<br>" 
                        + "Healing Rate: " + baseHealRate + " HP/s" + "<br>" 
                        + "Revive Time: " + reviveTime + " s" + "<br>" 
                        + "Lifetime: " + baseLifetime + " s" + "<br>" 
                        + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "range: " + range + " m" + "<br>" 
                        + "Healing Rate: " + newHealRate + " HP/s" + "<br>" 
                        + "Revive Time: " + reviveTime + " s" + "<br>" 
                        + "Lifetime: " + newLifetime + " s" + "<br>" 
                        + "Health: " + newHealth + " HP" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 8:
                baseexplosionDmg = 6719;
                explosionRad = 3.0;
                double detectionRange = 30.0;
                lifetime = 45.0;
                baseHealth = 1344;
                baseCool = 47.00;

                newexplosionDmg = 16125;
                newHealth = 4031;
                newCool = 47.00;

                baseSkill.setText("<html>" + "Explosion Damage: " + baseexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Detection Range: + " + detectionRange + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Cooldown: " + baseCool + " s" + "</html>");

                actualSkill.setText("<html>" + "Explosion Damage: " + newexplosionDmg + " HP" + "<br>" 
                        + "Explosion Radius: " + explosionRad + " m" + "<br>" 
                        + "Detection Range: + " + detectionRange + " m" + "<br>" 
                        + "Lifetime: " + lifetime + " s" + "<br>" 
                        + "Health: " + newHealth + " HP" + "<br>" 
                        + "Cooldown: " + newCool + " s" + "</html>");
                break;
            case 9:
                baseHealth = 925290;
                double wpnResistance = 20.0;
                double blastResistance = 25.0;
                baseCool = 37.60;
                int baseBlastShieldDmg = 0;

                newHealth = 107498;
                newCool = 37.60;
                int newBlastShieldDmg = 0;

                baseSkill.setText("<html>" + "Health: " + baseHealth + " HP" + "<br>" 
                        + "Weapon Resistance: " + wpnResistance + "%" + "<br>" 
                        + "Blast Resistance: " + blastResistance + "%" + "<br>" 
                        + "Cooldown: " + baseCool + " s" +  "<br>" 
                        + "Blast Shield Damage: " + baseBlastShieldDmg + " HP" + "</html>");

                actualSkill.setText("<html>" + "Health: " + newHealth + " HP" + "<br>" 
                        + "Weapon Resistance: " + wpnResistance + "%" + "<br>" 
                        + "Blast Resistance: " + blastResistance + "%" + "<br>" 
                        + "Cooldown: " + newCool + " s" +  "<br>" 
                        + "Blast Shield Damage: " + newBlastShieldDmg + " HP" + "</html>");
                break;
            default:
                break;
        }
    }//GEN-LAST:event_mod3BtnActionPerformed

    private void intSkillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intSkillActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intSkillActionPerformed

    private void recoveryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recoveryBtnActionPerformed
        mod1Btn.setText("No Mod");
        mod2Btn.setText("No Mod");
        mod3Btn.setText("No Mod");
        
        mod1Btn.setEnabled(false);
        mod2Btn.setEnabled(false);
        mod3Btn.setEnabled(false);
        
        skill = Integer.parseInt(intSkill.getText());
        
        double instantHeal = 50.0;
        double healOverTime = 100.0;
        double duration = 12.0;
        double range = 50.0;
        int baseCool = 867;
        
        int newCool = 867;
        
        baseSkill.setText("<html>" + "InstantHeal: " + instantHeal + "<br>" 
                + "Heal Over Time: " + healOverTime + "%" + "<br>" 
                + "Duration: " + duration + " s" + "<br>" 
                + "Range: " + range + " m" + "<br>" 
                + "Cooldown: " + baseCool + "</html>");
        
        
        
        actualSkill.setText("<html>" + "InstantHeal: " + instantHeal + "<br>" 
                + "Heal Over Time: " + healOverTime + "%" + "<br>" 
                + "Duration: " + duration + " s" + "<br>" 
                + "Range: " + range + " m" + "<br>" 
                + "Cooldown: " + newCool + "</html>");
    }//GEN-LAST:event_recoveryBtnActionPerformed

    private void tacticalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tacticalBtnActionPerformed
        mod1Btn.setText("No Mod");
        mod2Btn.setText("No Mod");
        mod3Btn.setText("No Mod");
        
        mod1Btn.setEnabled(false);
        mod2Btn.setEnabled(false);
        mod3Btn.setEnabled(false);
        
        skill = Integer.parseInt(intSkill.getText());
        
        double dmgBuff = 30.0;
        double wpnRPMBuff = 50.0;
        double reloadSpdBuff = 50.0;
        double duration = 13.0;
        double range = 50.0;
        int baseCool = 867;
        
        int newCool = 867;
        
        baseSkill.setText("<html>" + "Damage Buff: " + dmgBuff + "%" + "<br>" 
                + "Weapon RPM Buff: " + wpnRPMBuff + "%" + "<br>" 
                + "Reload Speed Buff: " + reloadSpdBuff + "%" + "<br>" 
                + "Duration: " + duration + " s" + "<br>" 
                + "Range: " + range + " m" + "<br>" 
                + "Cooldown: " + baseCool + " s" + "</html>");
        
        actualSkill.setText("<html>" + "Damage Buff: " + dmgBuff + "%" + "<br>" 
                + "Weapon RPM Buff: " + wpnRPMBuff + "%" + "<br>" 
                + "Reload Speed Buff: " + reloadSpdBuff + "%" + "<br>" 
                + "Duration: " + duration + " s" + "<br>" 
                + "Range: " + range + " m" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
    }//GEN-LAST:event_tacticalBtnActionPerformed

    private void survivorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_survivorBtnActionPerformed
        mod1Btn.setText("No Mod");
        mod2Btn.setText("No Mod");
        mod3Btn.setText("No Mod");
        
        mod1Btn.setEnabled(false);
        mod2Btn.setEnabled(false);
        mod3Btn.setEnabled(false);
        
        skill = Integer.parseInt(intSkill.getText());
        
        double dmgResistance = 50.0;
        double movementSpd = 30.0;
        double duration = 13.0;
        double range = 50.0;
        int baseCool = 867;
        
        int newCool = 867;
        
        baseSkill.setText("<html>" + "Damage Resistance: " + dmgResistance + "% " + "<br>" 
                + "Movement Speed: " + movementSpd + "%" + "<br>" 
                + "Duration: " + duration + " s" + "<br>" 
                + "Range: " + range + " m" + "<br>" 
                + "Cooldown: " + baseCool + " s" + "</html>");
        
        actualSkill.setText("<html>" + "Damage Resistance: " + dmgResistance + "% " + "<br>" 
                + "Movement Speed: " + movementSpd + "%" + "<br>" 
                + "Duration: " + duration + " s" + "<br>" 
                + "Range: " + range + " m" + "<br>" 
                + "Cooldown: " + newCool + " s" + "</html>");
    }//GEN-LAST:event_survivorBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SkillCalculator2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SkillCalculator2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SkillCalculator2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SkillCalculator2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SkillCalculator2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actualSkill;
    private javax.swing.JButton baseBallistic;
    private javax.swing.JButton baseFirstAid;
    private javax.swing.JButton baseMobileCover;
    private javax.swing.JButton basePulse;
    private javax.swing.JButton baseSeeker;
    private javax.swing.JLabel baseSkill;
    private javax.swing.JButton baseSmartCover;
    private javax.swing.JButton baseSticky;
    private javax.swing.JButton baseSupport;
    private javax.swing.JButton baseTurret;
    private javax.swing.JTextField intSkill;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton mod1Btn;
    private javax.swing.JButton mod2Btn;
    private javax.swing.JButton mod3Btn;
    private javax.swing.JButton recoveryBtn;
    private javax.swing.JLabel skillPwrLabel;
    private javax.swing.JButton survivorBtn;
    private javax.swing.JButton tacticalBtn;
    // End of variables declaration//GEN-END:variables
}
